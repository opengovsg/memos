name: ci
on:
  push:
  pull_request:
    types: [opened, reopened]
env:
  PRODUCTION_BRANCH: refs/heads/production # Production
  STAGING_BRANCH: refs/heads/staging # Force push onto this for deploying to staging

jobs:
  ci:
    name: Lint
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npx lockfile-lint --type npm --path frontend/package-lock.json --validate-https --allowed-hosts npm
      - run: npx lockfile-lint --type npm --path backend/package-lock.json --validate-https --allowed-hosts npm
      - run: npm run lint
      - run: npm run on-backend -- build

  test:
    name: Test
    runs-on: ubuntu-18.04
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: memos_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - name: Run tests and generate coverage
        run: npm run coverage
        env:
          POSTGRES_DB: memos_test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test

  gatekeep:
    name: Determine if Build & Deploy is needed
    outputs:
      proceed: ${{ steps.determine_proceed.outputs.proceed }}
    runs-on: ubuntu-18.04
    if: github.event_name == 'push'
    steps:
      - id: determine_proceed
        run: |
          if [[ -z "${AWS_ACCESS_KEY_ID}" || -z "${AWS_SECRET_ACCESS_KEY}"  ]]; then
            echo '::set-output name=proceed::false';
          elif [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
            echo '::set-output name=proceed::true';
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
            echo '::set-output name=proceed::true';
          else
            echo '::set-output name=proceed::false';
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  set_environment:
    outputs:
      current_env: ${{ steps.set-environment.outputs.current_env }}
    runs-on: ubuntu-18.04
    needs: [gatekeep]
    if: needs.gatekeep.outputs.proceed == 'true'
    steps:
      - id: set-environment
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=current_env::production"
          else
             echo "::set-output name=current_env::staging"
          fi

  build_deploy:
    name: Build and deploy
    runs-on: ubuntu-18.04
    needs: [ci, gatekeep, set_environment]
    if: needs.gatekeep.outputs.proceed == 'true'
    environment:
      name: ${{ needs.set_environment.outputs.current_env }}
    env:
      TAG: 'gh-actions-${{ github.sha }}-${{ github.run_id }}-${{github.run_attempt}}'
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          npm prune --production
      - name: Build backend
        run: |
          cd backend
          npm ci
          npm run build
          npm prune --production
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Copy to S3
        env:
          BUCKET_NAME: ${{ secrets.EB_BUCKET_NAME }}
        run: |
          zip -qr $TAG.zip backend/build frontend/build backend/node_modules frontend/node_modules backend/package.json frontend/package.json package.json
          aws s3 cp $TAG.zip s3://$BUCKET_NAME/$TAG.zip
      - name: Create application version
        env:
          BUCKET_NAME: ${{ secrets.EB_BUCKET_NAME }}
          APP_NAME: ${{ secrets.EB_APP_NAME }}
        run: |
          TRUNCATED_DESC=$(echo "${{github.event.head_commit.message}}" | head -n 1 | cut -b1-180)
          aws elasticbeanstalk create-application-version --application-name $APP_NAME \
          --version-label $TAG \
          --source-bundle S3Bucket=$BUCKET_NAME,S3Key=$TAG.zip \
          --description "$TRUNCATED_DESC"
      - name: Update EB environment
        id: update-eb
        env:
          APP_NAME: ${{ secrets.EB_APP_NAME }}
          DEPLOY_ENV: ${{ secrets.EB_ENV_NAME }}
        run: |
          aws elasticbeanstalk update-environment --application-name $APP_NAME \
            --environment-name $DEPLOY_ENV \
            --version-label $TAG
